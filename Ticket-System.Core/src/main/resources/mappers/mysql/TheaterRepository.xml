<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.apps.mybatis.mysql.TheaterRepository">

    <select id="findAll" resultType="com.apps.domain.entity.Theater">
        select theater.id, theater.name,code, location_id,
        theater.latitude, theater.longitude, thumbnail,image, l.name as locationName,
        address,active
        from theater
        join location l on theater.location_id = l.id
        <where>
            <if test="search != null">
                 theater.name like concat('%',#{search},'%')
            </if>
            <if test="location != null">
                and theater.location_id = #{location}
            </if>
        </where>
        <if test="sort != null">
            order by
            <choose>
                <when test="sort == 'name'">
                    name
                </when>
                <when test="sort == 'code'">
                    code
                </when>
                <when test="sort == 'latitude'">
                    latitude
                </when>
                <otherwise>
                    longitude
                </otherwise>
            </choose>
        </if>

        <if test="order != 'ASC' and sort != null" >
            DESC
        </if>
        <if test="limit != null and offset != null">
            limit #{limit} offset #{offset}
        </if>
    </select>

    <select id="findCountAll" resultType="INT">
        select count(*)
        from theater
        join location l on theater.location_id = l.id
        <where>
            <if test="search != null">
                theater.name like concat('%',#{search},'%')
            </if>
            <if test="location != null">
                and theater.location_id = #{location}
            </if>
        </where>

    </select>

    <select id="findById" resultType="com.apps.domain.entity.Theater">
        select * from theater where id = #{id};
    </select>

    <select id="findByLocation" resultType="com.apps.domain.entity.Theater">
        select * from theater where location_id = #{id};
    </select>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into booksystem.theater(code, name, location_id, latitude, longitude,thumbnail,image)
        VALUES (#{entity.code},#{entity.name},#{entity.locationId},
                #{entity.latitude},#{entity.longitude},
                #{entity.thumbnail},#{entity.image},#{entity.active})
        <selectKey keyProperty="id" order="AFTER" resultType="int" statementType="PREPARED" >
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <update id="update" parameterType="com.apps.domain.entity.Theater">
        update theater
        <set>
            code = #{theater.code},
            name = #{theater.name},
            latitude = #{theater.latitude},
            longitude = #{theater.longitude},
            thumbnail = #{theater.thumbnail},
            image = #{theater.image},
            location_id = #{theater.locationId},
            active = #{theater.active}
        </set>
        where id = #{theater.id}
    </update>

    <delete id="delete">
        delete from theater where id = #{id}
    </delete>


</mapper>