<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.apps.mybatis.mysql.UserAccountRepository">

    <select id="findById" resultType="com.apps.domain.entity.UserAccount">
        select * from user_account where user_info_id = #{id}
    </select>
    <insert id="insert">
        <if test="user.emailConfirmationToken != null">
            insert into user_account(user_info_id,email,password,email_confirmation_token,createdBy,
                                     createdDate,address,state,city,registeredAt)
            values (#{user.userInfoId},#{user.email},#{user.password},#{user.emailConfirmationToken},#{user.createdBy},#{user.createdDate},
                    #{user.address},#{user.state},#{user.city},#{user.registeredAt})
        </if>
        <if test="user.emailConfirmationToken == null">
            insert into user_account(user_info_id,email,password,createdBy,createdDate,address,state,city)
            values (#{user.userInfoId},#{user.email},#{user.password},#{user.createdBy},
                    #{user.createdDate},#{user.address},#{user.state},#{user.city})
        </if>
    </insert>

    <select id="findUserById" resultType="com.apps.domain.entity.User" >
        select user_info.id,first_name,last_name,full_name,ua.email,r2.name,r.role_id,
               last_login,createdBy,createdDate,modifiedBy,modifiedDate,
               address, city, state, activeDate, registeredAt,uas.id as uasId,
               user_info.current_logged as currentLogged,user_info.photo as photo,
               user_info.full_name as fullName
        from user_info
                 join user_account ua on ua.user_info_id = user_info.id
                 join user_role r on user_info.id = r.user_id
                 join role r2 on r.role_id = r2.id
                 join user_account_status uas on ua.user_account_status_id = uas.id
        <where>
            <if test="id != null">
                user_info.id = #{id}
            </if>
        </where>
    </select>


    <select id="findAllUser" resultType="com.apps.domain.entity.User" >
        select user_info.id,full_name,ua.email,r2.name,r.role_id,
        last_login,createdBy,createdDate,modifiedBy,modifiedDate,
        address, city, state, activeDate, registeredAt,uas.id as uasId,password,
        user_info.current_logged as currentLogged
        from user_info
        join user_account ua on ua.user_info_id = user_info.id
        join user_role r on user_info.id = r.user_id
        join role r2 on r.role_id = r2.id
        join user_account_status uas on ua.user_account_status_id = uas.id
        <where>
            <if test="role != null">
               role_id = #{role}
            </if>
            <if test="search != null">
               and full_name like concat('%',#{search},'%')
            </if>
        </where>

        <if test="sort != null">
            order by
            <choose>
                <when test="sort == 'id'">
                    id
                </when>
                <when test="sort == 'fullName'">
                    full_name
                </when>
                <otherwise>
                    role_id
                </otherwise>
            </choose>
        </if>
        <if test="order != 'ASC' and sort != null" >
            DESC
        </if>
        limit #{limit} offset #{offset}
    </select>

    <select id="findAllUserSocial" resultType="com.apps.response.entity.UserSocial" >
        select user_info.id as id,email,
               last_login, full_name, photo, ur.role_id,current_logged,is_login_social as isLoginSocial
        from user_info
            join user_role ur on user_id = user_info.id
        <where>

            <if test="role != null">
                user_role.role_id = #{role}
            </if>
            <if test="search != null">
                and full_name like concat('%',#{search},'%')
            </if>
            <if test="social != null">
                and is_login_social = true
            </if>
        </where>

        <if test="sort != null">
            order by
            <choose>
                <when test="sort == 'id'">
                    id
                </when>
                <when test="sort == 'fullName'">
                    full_name
                </when>
                <otherwise>
                    role_id
                </otherwise>
            </choose>
        </if>
        <if test="order != 'ASC' and sort != null" >
            DESC
        </if>
        limit #{limit} offset #{offset}
    </select>

    <select id="findUserSocialById" resultType="com.apps.response.entity.UserSocial" >
        select user_info.id as id,email,
               last_login, full_name, photo,current_logged,
               is_login_social as isLoginSocial
        from user_info
        <where>
            id = #{id}
        </where>
    </select>



    <select id="findCountAll" resultType="INT">
        select count(*) from user_info
        join user_account ua on ua.user_info_id = user_info.id
        join user_role r on user_info.id = r.user_id
        join role r2 on r.role_id = r2.id
        join user_account_status uas on ua.user_account_status_id = uas.id
        <where>
            <if test="role != null">
                role_id = #{role}
            </if>
            <if test="search != null">
                and full_name like concat('%',#{search},'%')
            </if>
        </where>

    </select>

    <update id="updateUserAccount">
        update user_account
        <set>
            <if test="user.address != null">
                address = #{user.address},
            </if>
            <if test="user.state != null">
                state = #{user.state},
            </if>
            <if test="user.city != null">
                city = #{user.city},
            </if>
            <if test="user.userAccountStatusId != null">
                user_account_status_id = #{user.userAccountStatusId},
            </if>
            <if test="user.password != null">
                password = #{user.password},
            </if>
            <if test="user.modifiedBy != null">
                modifiedBy = #{user.modifiedBy},
            </if>
            <if test="user.modifiedDate != null">
                modifiedDate = #{user.modifiedDate}
            </if>
        </set>
        <where>
            user_info_id = #{user.userInfoId}
        </where>
    </update>

    <update id="updateUserInfo" >
        update user_info
        <set>
            <if test="user.firstName != null">
                first_name = #{user.firstName},
            </if>
            <if test="user.lastName != null">
                last_name = #{user.lastName},
            </if>
            <if test="user.fullName != null">
                full_name = #{user.fullName},
            </if>
            <if test="user.photo != null">
                photo = #{user.photo},
            </if>
            <if test="user.currentLogged != null">
                current_logged = #{user.currentLogged}
            </if>
        </set>
        <where>
            id = #{user.id}
        </where>
    </update>

    <select id="findUserByEmail" resultType="com.apps.domain.entity.User">
        select password,user_info_id as id, uas.id as uasId
        from user_account
        join user_account_status uas on user_account.user_account_status_id = uas.id
        where email = #{email}
    </select>

    <select id="findUserInfoByEmail" resultType="com.apps.response.entity.UserSocial">
        select user_info.id as id,email,
               last_login, full_name, photo,current_logged
        from user_info
        where email = #{email} and is_login_social = true
    </select>

</mapper>